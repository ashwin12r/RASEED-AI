// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview A spending analysis AI agent.
 *
 * - analyzeSpending - A function that handles the spending analysis process.
 * - AnalyzeSpendingInput - The input type for the analyzeSpending function.
 * - AnalyzeSpendingOutput - The return type for the analyzeSpending function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnalyzeSpendingInputSchema = z.object({
  query: z
    .string()
    .describe("A user's question about their spending habits, e.g., 'How much did I spend on groceries last month?'"),
  receiptData: z.string().describe('A JSON string containing the user receipts data.'),
  language: z.string().optional().describe('The language for the response (e.g., "Tamil", "Hindi"). Defaults to English.'),
});
export type AnalyzeSpendingInput = z.infer<typeof AnalyzeSpendingInputSchema>;

const AnalyzeSpendingOutputSchema = z.object({
  summary: z.string().describe('A summary of the user spending based on the query.'),
  savingsSuggestions: z
    .string()
    .optional()
    .describe('Suggestions for saving money based on spending trends.'),
  insight: z
    .string()
    .optional()
    .describe("The most relevant insights about the user's finances."),
});
export type AnalyzeSpendingOutput = z.infer<typeof AnalyzeSpendingOutputSchema>;

export async function analyzeSpending(input: AnalyzeSpendingInput): Promise<AnalyzeSpendingOutput> {
  return analyzeSpendingFlow(input);
}

const prompt = ai.definePrompt({
  name: 'analyzeSpendingPrompt',
  input: {schema: AnalyzeSpendingInputSchema},
  output: {schema: AnalyzeSpendingOutputSchema},
  prompt: `You are a personal finance assistant. You have access to the user's receipt data, and the user is asking a question about their spending habits.

Answer the question based on the provided receipt data. Provide a summary of the user's spending, and suggest ways to save money. Share the most relevant insights about the user's finances.
{{#if language}}
You MUST respond in the following language: {{language}}.
{{else}}
Respond in English.
{{/if}}

Receipt Data: {{{receiptData}}}

Question: {{{query}}}

If you can't answer the question with the provided data, say that you can't in the requested language.`,
});

const analyzeSpendingFlow = ai.defineFlow(
  {
    name: 'analyzeSpendingFlow',
    inputSchema: AnalyzeSpendingInputSchema,
    outputSchema: AnalyzeSpendingOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
